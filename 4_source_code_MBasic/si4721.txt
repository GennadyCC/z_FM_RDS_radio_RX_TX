module si4721

include routine_functions 'функции и процедуры стандартно выполняемые
include fonts

sub procedure SI_Pins()
sub procedure SDIO_INPUT()
sub procedure SDIO_OUTPUT()

sub procedure Si_SPI_init()
sub procedure Si_Write(dim spi_value as byte) 'запись 1 байта SPI
sub function Si_Read()as byte 'чтение 1 байта SPI
sub procedure send_data() 'отпправка данных SPI


sub function wait_status(dim CMD, check_bit as byte) as byte 'ожидает нужного результата check_bit и возвращает результат регистра STATUS
sub function GET_INT_STATUS(dim check_bit as byte) as byte 'ожидает установку status = check_bit и возвращает результат регистра STATUS

sub function wait_status_byte_CTS(dim CMD as byte) as byte 'ожидает установку бита CTS-готовность к сл. команде и возвращает результат регистра STATUS
'sub function GET_INT_STATUS() as byte 'ожидает установку бита STC и возвращает результат регистра STATUS
sub procedure error_message(dim CMD as byte) 'вывод сообщения об ошибке CTS
'sub procedure STC_error_message() 'вывод сообщения об ошибке
sub procedure get_data() 'получение данных SPI 16 байт - заполняет переменные Status_, RESP1 - RESP16
sub procedure reset_var() 'обнуление переменных
sub procedure POWER_UP_RX() 'включение
sub procedure GET_REV() 'версия чипа
sub procedure POWER_DOWN() 'выключение
sub procedure FM_TUNE_FREQ(dim friequency as word) 'настройка RX
sub procedure FM_ANTENNA_INPUT() 'настройка
sub procedure RX_VOLUME_(dim volume as byte) 'настройка громкости
sub procedure FM_TUNE_STATUS() 'статус настройки
sub procedure FM_RSQ_STATUS() 'статус настройки
sub procedure FM_SEEK_START() 'статус настройки

sub procedure RDS_INT_SOURCE()
sub procedure RDS_INT_FIFO_COUNT() '
sub procedure RDS_CONFIG() '
'sub procedure FM_RDS_STATUS_start() '
sub procedure FM_RDS_STATUS() '



sub procedure screen()
sub procedure TFT_Write() ' отрисовать значения переменных






dim Num as word
dim txt_s as string[10]        'временно
dim message as string[20]

' переменные для SPI
dim CTL as byte
dim CMD as byte

dim ARG1 as byte
dim ARG2 as byte
dim ARG3 as byte
dim ARG4 as byte
dim ARG5 as byte
dim ARG6 as byte
dim ARG7 as byte
dim ARG8 as byte
dim ARG9 as byte
dim ARG10 as byte
dim ARG11 as byte
dim ARG12 as byte
dim ARG13 as byte
dim ARG14 as byte
dim ARG15 as byte
dim ARG16 as byte
dim ARG17 as byte
dim Status_ as byte
dim RESP1 as byte
dim RESP2 as byte
dim RESP3 as byte
dim RESP4 as byte
dim RESP5 as byte
dim RESP6 as byte
dim RESP7 as byte
dim RESP8 as byte
dim RESP9 as byte
dim RESP10 as byte
dim RESP11 as byte
dim RESP12 as byte
dim RESP13 as byte
dim RESP14 as byte
dim RESP15 as byte
dim spi_value as byte
dim value as word
dim error_count as word
dim error_ as byte
dim i_s as byte


 
dim SI_RST as sbit at GPIOB_ODR.B15    ' вход RST
    SI_SEN  as sbit at GPIOB_ODR.B14
    SI_SCLK as sbit at GPIOB_ODR.B13
    SI_SDO as sbit at GPIOB_ODR.B12   ' регистр выход
    SI_SDI as sbit at GPIOB_IDR.B12   ' регистр вход

    'SI_GPIO1 as sbit at GPIOC_ODR.B9
    SI_GPIO2 as sbit at GPIOA_ODR.B9
    SI_GPIO1 as sbit at GPIOA_ODR.B10

    SI_L_in  as sbit at GPIOC_ODR.B9
    SI_R_in  as sbit at GPIOA_ODR.B8

    SI_power    as sbit at GPIOB_ODR.B1    ' SI_power = 1       'выкл
    SI_Headphone as sbit at GPIOB_ODR.B2   ' SI_Headphone = 1   'выкл звук
    SI_RF_power as sbit at GPIOA_ODR.B12   ' SI_RF_power = 1    'выкл TX_amp
    'SI_Vio as sbit at GPIOB_ODR.B0

implements



 sub procedure SI_Pins()           ' настройка портов контроллера
  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_15, _GPIO_CFG_DIGITAL_OUTPUT)' SI_RST
  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_14, _GPIO_CFG_DIGITAL_OUTPUT)' SI_SEN
  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_13, _GPIO_CFG_DIGITAL_OUTPUT)' SI_SCLK
  'GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_OUTPUT)' SI_SDO и SI_SDI  - указаны ниже в функции

  GPIO_Config(@GPIOC_BASE, _GPIO_PINMASK_9, _GPIO_CFG_DIGITAL_OUTPUT)' ' input audio L
  GPIO_Config(@GPIOA_BASE, _GPIO_PINMASK_8, _GPIO_CFG_DIGITAL_OUTPUT)' ' input audio R
  
  GPIO_Config(@GPIOA_BASE, _GPIO_PINMASK_10, _GPIO_CFG_DIGITAL_OUTPUT)' SI_GPIO1
  GPIO_Config(@GPIOA_BASE, _GPIO_PINMASK_9, _GPIO_CFG_DIGITAL_OUTPUT)'  SI_GPIO2

  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_1, _GPIO_CFG_DIGITAL_OUTPUT)'  SI_power
  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_2, _GPIO_CFG_DIGITAL_OUTPUT)'  SI_Headphone

'  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_10, _GPIO_CFG_DIGITAL_OUTPUT)'
'  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_11, _GPIO_CFG_DIGITAL_OUTPUT)'

  GPIO_Config(@GPIOA_BASE, _GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_OUTPUT)' SI_RF_power
'  GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_0, _GPIO_CFG_DIGITAL_OUTPUT)'

'GPIO_Config(@GPIOA_BASE,
'            _GPIO_PINMASK_8,
'            _GPIO_CFG_MODE_ALT_FUNCTION or _GPIO_CFG_OTYPE_PP or _GPIO_CFG_SPEED_50MHZ)

'GPIO_Config(@GPIOA_BASE,
'            _GPIO_PINMASK_8,
'            _GPIO_CFG_MODE_ALT_FUNCTION or _GPIO_CFG_OTYPE_PP or _GPIO_CFG_SPEED_50MHZ)



 end sub

 sub procedure SDIO_INPUT()     ' перевод порта контроллера на вход
    GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_INPUT)'
 end sub

 sub procedure SDIO_OUTPUT()    ' перевод порта контроллера на выход
    GPIO_Config(@GPIOB_BASE, _GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_OUTPUT)'
 end sub

sub procedure Si_SPI_init() 'инициализация si4721 для работы через SPI
SI_Pins()    ' инициализация портов
SDIO_OUTPUT() ' SDIO настроить на выход
SI_power = 0 ' включить
delay_ms(100)
SI_RST = 0
SI_SEN = 0
SI_SCLK = 0
SI_SDO = 0
SI_GPIO1 = 1
SI_GPIO2 = 1
delay_ms(100)
SI_RST = 1
delay_ms(100)
SI_SEN = 1
SI_GPIO1 = 0
SI_GPIO2 = 0
end sub

sub procedure Si_Write(dim spi_value as byte) 'запись 1 байта SPI
 dim i as byte
 i = 8
'    SI_SCLK = 0     ' можно убрать
'    delay_us(1)     ' можно убрать
  while i <> 0
    SI_SDO = spi_value.(i-1)
    nop
    nop
    nop
'    delay_us(1)
    SI_SCLK = 1
    nop
    nop
    nop
'    delay_us(1)
    SI_SCLK = 0
    dec(i)
  wend

end sub

sub function Si_Read()as byte 'чтение 1 байта SPI
  dim i as byte
  i = 8
'    SI_SCLK = 0   ' можно убрать
'    delay_us(1)   ' можно убрать
  while i <> 0
    SI_SCLK = 1
    nop
    nop
    nop
'    delay_us(1)
    result.(i-1) = SI_SDI
    nop
    nop
    nop
'    delay_us(1)
    SI_SCLK = 0
    dec(i)
  wend

end sub

sub procedure send_data() 'отпправка данных SPI
    SDIO_OUTPUT() ' SDIO настроить на выход
    nop
    nop
    nop
 '   delay_us(5)
    SI_SEN = 0
    Si_Write(0x48)
    Si_Write(CMD)
    Si_Write(ARG1)
    Si_Write(ARG2)
    Si_Write(ARG3)
    Si_Write(ARG4)
    Si_Write(ARG5)
    Si_Write(ARG6)
    Si_Write(ARG7)
    SI_SEN = 1
end sub

sub procedure send_data_prop() 'отпправка данных SPI
       SDIO_OUTPUT() ' SDIO настроить на выход
    nop
    nop
    nop
 '   delay_us(5)
    SI_SEN = 0
    Si_Write(0x48)
    Si_Write(CMD)
    Si_Write(ARG1)
    Si_Write(ARG2)
    Si_Write(ARG3)
    Si_Write(ARG4)
    Si_Write(ARG5)
    Si_Write(ARG6)
    Si_Write(ARG7)
    Si_Write(ARG8)
    Si_Write(ARG9)
    Si_Write(ARG10)
    Si_Write(ARG11)
    Si_Write(ARG12)
    Si_Write(ARG13)
    Si_Write(ARG14)
    Si_Write(ARG15)
    SI_SEN = 1
end sub

sub function wait_status_byte_CTS(dim CMD as byte) as byte 'ожидает установку бита CTS-готовность к сл. команде и возвращает результат регистра STATUS
  dim i as word
  SDIO_OUTPUT()
  result = 0
  i = 0
  while result.7 = 0  'result <> 0x80
    SI_SEN = 0
    Si_Write(0x80)
    SDIO_INPUT()
    result = Si_Read()
    SI_SEN = 1
    SDIO_OUTPUT()
    inc(i)
     if i > 10000 then
      error_message(CMD)
     end if
     delay_us(10)
  wend
end sub



sub procedure error_message(dim CMD as byte) 'вывод сообщения об ошибке
  dim txt as string [6]
  TFT_Set_Pen(CL_red, 0)
  TFT_Set_Brush(1, 0, 1, TOP_TO_BOTTOM, CL_red, CL_red)
  TFT_Rectangle(0, 100, 320, 140)
  TFT_Set_Font(@Digital_7_Italic7x14_Regular, CL_white, FO_HORIZONTAL)
  TFT_Write_Text("command error = 0x", 90, 113)
  ByteToHex(CMD, txt)
  TFT_Write_Text(txt, 206, 113)
   
   while TRUE
   
   wend
end sub


'sub function get_status() as byte 'ожидает установку бита STC и возвращает результат регистра STATUS
'  SDIO_OUTPUT()
'  result = 0
'  SI_SEN = 0
'  Si_Write(0x80)
'  SDIO_INPUT()
'  result = Si_Read()
'  SI_SEN = 1
'end sub

sub procedure get_data() 'получение данных SPI 16 байт - заполняет переменные Status_, RESP1 - RESP16
SDIO_OUTPUT()
    nop
    nop
    nop
'delay_us(5)
    SI_SEN = 0
    Si_Write(0xC0)
SDIO_INPUT()
'delay_us(5)
    nop
    nop
    nop
    status_ = Si_Read()
    RESP1 = Si_Read()
    RESP2 = Si_Read()
    RESP3 = Si_Read()
    RESP4 = Si_Read()
    RESP5 = Si_Read()
    RESP6 = Si_Read()
    RESP7 = Si_Read()
    RESP8 = Si_Read()
    RESP9 = Si_Read()
    RESP10 = Si_Read()
    RESP11 = Si_Read()
    RESP12 = Si_Read()
    RESP13 = Si_Read()
    RESP14 = Si_Read()
    RESP15 = Si_Read()
    SI_SEN = 1
end sub

sub procedure reset_var() 'обнуление переменных
  Status_ = 0x00
  CMD = 0x00
  ARG1 = 0x00
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  RESP1 = 0x00
  RESP2 = 0x00
  RESP3 = 0x00
  RESP4 = 0x00
  RESP5 = 0x00
  RESP6 = 0x00
  RESP7 = 0x00
  RESP8 = 0x00
  RESP9 = 0x00
  RESP10 = 0x00
  RESP11 = 0x00
  RESP12 = 0x00
  RESP13 = 0x00
  RESP14 = 0x00
  RESP15 = 0x00
end sub

sub procedure POWER_UP_RX() '
  'reset_var()
  CMD = 0x01
  ARG1 = 0x00    '00'внешнее тактирование    0x10=внешеий кварц и прерывания по GP2
  ARG2 = 0x05'  аналог аудио выход
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub procedure GET_REV() 'версия чипа
  'reset_var()
  CMD = 0x10
  ARG1 = 0x00
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
  wait_status_byte_CTS(CMD)
  get_data()
end sub

sub procedure POWER_DOWN() '
  'reset_var()
  CMD = 0x11
  ARG1 = 0x00
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub function GET_INT_STATUS(dim check_bit as byte) as byte 'ожидает установку status = check_bit и возвращает результат регистра STATUS
  dim i as word
  result = 0
  i = 0

  while result = check_bit  'result <> 0x80
    CMD = 0x14
    ARG1 = 0x00
    ARG2 = 0x00
    ARG3 = 0x00
    ARG4 = 0x00
    ARG5 = 0x00
    ARG6 = 0x00
    ARG7 = 0x00
    send_data()

    SDIO_OUTPUT()

   delay_us(500)

    SI_SEN = 0
    Si_Write(0x80)
    SDIO_INPUT()
    result = Si_Read()
    SI_SEN = 1
    SDIO_OUTPUT()
    inc(i)
     if i > 10000 then
      error_message(CMD)
     end if
  wend
end sub

sub procedure FM_TUNE_FREQ(dim friequency as word) 'настройка RX
  'reset_var()
  CMD = 0x20
  ARG1 = 0x00
  ARG2 = Hi(friequency)'0x25
  ARG3 = Lo(friequency)'0x94
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub procedure FM_SEEK_START() 'статус настройки
  'reset_var()
  CMD = 0x21
  ARG1 = 0x0C
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
  wait_status_byte_CTS(CMD)
  'get_data()
end sub

sub procedure FM_TUNE_STATUS() 'статус настройки
  reset_var()
  CMD = 0x22
  ARG1 = 0x01'0x01 03
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
  wait_status_byte_CTS(CMD)
  get_data()
end sub

sub procedure FM_RSQ_STATUS() 'статус настройки
  reset_var()
  CMD = 0x23
  ARG1 = 0x01
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
  wait_status_byte_CTS(CMD)
  get_data()
end sub


sub procedure RDS_INT_SOURCE() '
  'reset_var()
  CMD = 0x12
  ARG1 = 0x00
  ARG2 = 0x15'
  ARG3 = 0x00'
  ARG4 = 0x00
  ARG5 = 0x01
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub procedure RDS_INT_FIFO_COUNT() '
  'reset_var()
  CMD = 0x12
  ARG1 = 0x00
  ARG2 = 0x15'
  ARG3 = 0x01'
  ARG4 = 0x00
  ARG5 = 0x04
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub procedure RDS_CONFIG() '
  'reset_var()
  CMD = 0x12
  ARG1 = 0x00
  ARG2 = 0x15'
  ARG3 = 0x02'
  ARG4 = 0xEF
  ARG5 = 0x01
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub


sub procedure FM_RDS_STATUS() '
  CMD = 0x24
  ARG1 = 0x01
  ARG2 = 0x00
  ARG3 = 0x00
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
  wait_status_byte_CTS(CMD)
  get_data()
end sub









sub procedure FM_ANTENNA_INPUT() 'настройка
  'reset_var()
  CMD = 0x12
  ARG1 = 0x00
  ARG2 = 0x11
  ARG3 = 0x07
  ARG4 = 0x00
  ARG5 = 0x00
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub

sub procedure RX_VOLUME_(dim volume as byte) 'настройка громкости
  'reset_var()
  CMD = 0x12
  ARG1 = 0x00
  ARG2 = 0x40'
  ARG3 = 0x00'
  ARG4 = 0x00
  ARG5 = volume '0x1E'   max=63 (0x3F)
  ARG6 = 0x00
  ARG7 = 0x00
  send_data()
end sub



sub function wait_status(dim CMD, check_bit as byte) as byte 'ожидает нужного результата check_bit и возвращает результат регистра STATUS
  dim i as word
  SDIO_OUTPUT()
  result = 0
  i = 0
  while result = check_bit  'result <> 0x80
    SI_SEN = 0
    Si_Write(0x80)
    SDIO_INPUT()
    result = Si_Read()
    SI_SEN = 1
    SDIO_OUTPUT()
    inc(i)
     if i > 10000 then
      error_message(CMD)
     end if
     delay_us(10)
  wend
end sub

sub function status() as byte 'ожидает нужного результата check_bit и возвращает результат регистра STATUS
  dim i as word
  SDIO_OUTPUT()
  result = 0
  i = 0
    SI_SEN = 0
    Si_Write(0x80)
    SDIO_INPUT()
    result = Si_Read()
    SI_SEN = 1
    SDIO_OUTPUT()
end sub






sub procedure screen() ' отрисовать названия строк
    TFT_Set_Font(@TFT_defaultFont, CL_red, FO_HORIZONTAL)
    TFT_Write_Text("STATUS - ", 5, 10)
    TFT_Set_Font(@TFT_defaultFont, CL_blue, FO_HORIZONTAL)
    TFT_Write_Text(" RESP1 - ", 5, 25)
    TFT_Write_Text(" RESP2 - ", 5, 40)
    TFT_Write_Text(" RESP3 - ", 5, 55)
    TFT_Write_Text(" RESP4 - ", 5, 70)
    TFT_Write_Text(" RESP5 - ", 5, 85)
    TFT_Write_Text(" RESP6 - ", 5, 100)
    TFT_Write_Text(" RESP7 - ", 5, 115)
    TFT_Write_Text(" RESP8 - ", 5, 130)
    TFT_Write_Text(" RESP9 - ", 5, 145)
    TFT_Write_Text(" RESP10 - ", 5, 160)
    TFT_Write_Text(" RESP11 - ", 5, 175)
    TFT_Write_Text(" RESP12 - ", 5, 190)
end sub

sub procedure TFT_Write() ' отрисовать значения переменных
  dim frieq as word
  
  TFT_Set_Pen(CL_white, 0)    ' выбрать цвет и толщину линии
  TFT_Set_Brush(1,CL_white,0,0,0,0)
  TFT_Rectangle(70,0,310,230)
     
     TFT_Write_Text(message, 70, 0)
     TFT_Set_Font(@TFT_defaultFont, CL_red, FO_HORIZONTAL)
     Bytetohex(Status_, txt_s)
     TFT_Write_Text(txt_s, 70, 10)
     TFT_Set_Font(@TFT_defaultFont, CL_black, FO_HORIZONTAL)
     Bytetohex(RESP1, txt_s)
     TFT_Write_Text(txt_s, 70, 25)
     Bytetohex(RESP2, txt_s)
     TFT_Write_Text(txt_s, 70, 40)
     Bytetohex(RESP3, txt_s)
     TFT_Write_Text(txt_s, 70, 55)
     Bytetohex(RESP4, txt_s)
     TFT_Write_Text(txt_s, 70, 70)
     Bytetostr(RESP4, txt_s)
     TFT_Write_Text(txt_s, 90, 70)
     Bytetohex(RESP5, txt_s)
     TFT_Write_Text(txt_s, 70, 85)
     Bytetohex(RESP6, txt_s)
     TFT_Write_Text(txt_s, 70, 100)
     Bytetohex(RESP7, txt_s)
     TFT_Write_Text(txt_s, 70, 115)
     Bytetohex(RESP8, txt_s)
     TFT_Write_Text(txt_s, 70, 130)
     Bytetohex(RESP9, txt_s)
     TFT_Write_Text(txt_s, 70, 145)
     Bytetohex(RESP10, txt_s)
     TFT_Write_Text(txt_s, 70, 160)
     Bytetohex(RESP11, txt_s)
     TFT_Write_Text(txt_s, 70, 175)
     Bytetohex(RESP12, txt_s)
     TFT_Write_Text(txt_s, 70, 190)

    
    Hi(frieq)= RESP2
    Lo(frieq)= RESP3
    wordtostr(frieq, txt_s)
    TFT_Write_Text(txt_s, 90, 40)
    
end sub


'
'
'
'sub procedure POWER_UP() 'включение
'Power_up:
'  reset_var()
'  delay_us(500)
'  CMD = 0x01
'  ARG1 = 0x12 ' внешеий кварц
'  ARG2 = 0x50 ' аналог аудио вход
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(1000)
'    get_status()
'end sub
'
'
'
'sub procedure POWER_DOWN() 'выключение
' ' GP1_ = 0
' ' GP2_ = 0
'  reset_var()
'  CMD = 0x11
'  ARG1 = 0x00
'  ARG2 = 0x00
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_status()
'end sub
'
'sub procedure FM_TUNE_FREQ() 'настройка RX
''  reset_var()
'  CMD = 0x20
'  ARG1 = 0x00
''  ARG2 = 0x25
''  ARG3 = 0x94
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(100)
'    get_status()
'end sub
'
'sub procedure REFCLK_FREQ() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x02
'  ARG3 = 0x01
'  ARG4 = 0x80     '32768
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure REFCLK_PRESCALE() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x02
'  ARG3 = 0x02
'  ARG4 = 0x00   '1
'  ARG5 = 0x01
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(100)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_STEREO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x11
'  ARG3 = 0x05
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_MONO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x11
'  ARG3 = 0x06
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_RSSI_STEREO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x18
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_RSSI_MONO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x18
'  ARG3 = 0x01
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_SNR_STEREO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x18
'  ARG3 = 0x04
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_SNR_MONO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x18
'  ARG3 = 0x05
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_BLEND_MULTIPATH_STEREO_THRESHOLD() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x18
'  ARG3 = 0x08
'  ARG4 = 0x00
'  ARG5 = 0x64
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(500)
'    get_status()
'end sub
'
'sub procedure FM_ANTENNA_INPUT() 'настройка
'  reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x11
'  ARG3 = 0x07
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(100)
'    get_status()
'end sub
'
'sub procedure RX_VOLUME_() 'настройка громкости
'  'reset_var()
'  CMD = 0x12
'  ARG1 = 0x00
'  ARG2 = 0x40'
'  ARG3 = 0x00'
'  ARG4 = 0x00
' ' ARG5 = 0x1E'   max=63 (0x3F)
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_status()
'end sub
'
'sub procedure GET_INT_STATUS() 'статус настройки
'  reset_var()
'  CMD = 0x14
'  ARG1 = 0x00
'  ARG2 = 0x00
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'          delay_ms(100)
'    get_status()
'end sub
'
'sub procedure FM_TUNE_STATUS() 'статус настройки
'  reset_var()
'  CMD = 0x22
'  ARG1 = 0x00'0x01
'  ARG2 = 0x00
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_data()
'end sub
'
'sub procedure FM_RSQ_STATUS() 'статус настройки
'  reset_var()
'  CMD = 0x23
'  ARG1 = 0x01
'  ARG2 = 0x00
'  ARG3 = 0x00
'  ARG4 = 0x00
'  ARG5 = 0x00
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_data()
'end sub
'
'sub procedure TX_TUNE_POWER() 'мощность TX
''  reset_var()
'  CMD = 0x31
'  ARG1 = 0x00
''  ARG2 = 0x00
''  ARG3 = 0x73' 115dB uV
'  ARG4 = 0x00
'  ARG5 = 0x00 '
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_status()
'end sub
'
'sub procedure TX_TUNE_FREQ() 'настройка TX
''  reset_var()
'  CMD = 0x30
'  ARG1 = 0x00
''  ARG2 = 0x25
''  ARG3 = 0xB2
'  ARG4 = 0x00
'  ARG5 = 0x00 '
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_status()
'end sub
'
'sub procedure TX_TUNE_STATUS() 'настройка TX
'  reset_var()
'  CMD = 0x33
'  ARG1 = 0x00
'  ARG2 = 0x00'
'  ARG3 = 0x00'
'  ARG4 = 0x00
'  ARG5 = 0x00 '
'  ARG6 = 0x00
'  ARG7 = 0x00
'    send_data()
'    get_data()
'end sub













' рабочая программа радио (прием,передача)
'Radio:
'' начало программы радио
'delay_ms(100)
'TFT_Init_LS022_8bit(320, 240)   ' инициализация дисплея
'TFT_Fill_Screen(CL_Black)
'TFT_Set_Index_Ptr(0x28)'       // Выключение дисплея
'TFT_Set_Index_Ptr(0x29)'       // Включение дисплея
'TFT_BLED = 0                    ' подсветка дисплея
'
'
'
'si4721_main:
'
' Num = 0
' TFT_Fill_Screen(CL_white)
'
'
'
'POWER_UP_1:
' screen()     'отрисовать значение переменных
' Si_SPI_init() 'инициализация портов
' SI_Headphone = 1   'выкл
' SI_RF_power = 1    'выкл
''SI_Pins()
'
'
'
''set12:
''goto set12
'
' message = "Power_up"
' POWER_UP_RX()   'приемник
'   'POWER_UP()'передатчик
' Write_()
'          delay_ms(2000)
'
'
'
'  message = "Get_rev"
'  GET_REV()
'  Write_()
'          delay_ms(2000)
'
'
' ' goto TX
'
' ' приемник
'
'
' set1:
'
'  ARG5 = 10'   max=63 (0x3F)
'  RX_VOLUME_() ' настройка громкости
'   'message = "RX-96.20"
'
'
'
'
'
''   message = "REFCLK_PRESCALE"
''   REFCLK_PRESCALE()
''   Write_()
''          delay_ms(2000)
''   message = "REFCLK_FREQ"
''   REFCLK_FREQ()
''   Write_()
''          delay_ms(2000)
''   message = "REFCLK_PRESCALE"
''   REFCLK_PRESCALE()
''   Write_()
''          delay_ms(2000)
'
'   message = "FM_ANTENNA_INPUT"
'   FM_ANTENNA_INPUT()
'   Write_()
'          delay_ms(2000)
'
'FM_BLEND_STEREO_THRESHOLD()
'FM_BLEND_MONO_THRESHOLD()
'
'FM_BLEND_RSSI_STEREO_THRESHOLD()
'FM_BLEND_RSSI_MONO_THRESHOLD()
'FM_BLEND_SNR_STEREO_THRESHOLD()
'FM_BLEND_SNR_MONO_THRESHOLD()
'FM_BLEND_MULTIPATH_STEREO_THRESHOLD()
'
'   message = "FM_TUNE"
'   ARG2 = 0x25 '   0x26'
'   ARG3 = 0x94  '  0xDE'
'   FM_TUNE_FREQ()
'   ARG5 = 35'   max=63 (0x3F)  25
'   RX_VOLUME_() ' настройка громкости
'   Write_()
'          delay_ms(2000)
'
'
'
'
'
'
'
'
'   message = "GET_INT_STATUS"
'   GET_INT_STATUS()
'   Write_()
'          delay_ms(1000)
'
'          TFT_BLED = 0                    ' подсветка дисплея
' '         SI_Vio = 1
'          'SI_SEN = 0
'          SI_GPIO1 = 0
'          SI_GPIO2 = 0
'set11:
'
'          SI_Headphone = 0    ' включить УМ для наушников
'
'          delay_ms(1000)
'          TFT_BLED = 0                    ' подсветка дисплея
'          delay_ms(2000)
'          TFT_BLED = 1                    ' подсветка дисплея
'          delay_ms(2000)
'
''          SI_Headphone = 1
''
''          delay_ms(3000)
'goto set11
'
'  volume:
'  for ARG5 = 30 to 50'   max=63 (0x3F)
'  RX_VOLUME_() ' настройка громкости
'  delay_ms(100)
'  next ARG5
'  delay_ms(3000)
'  ARG5 = 10
'
' ' goto volume
'
'
'   stop_:
'   GET_INT_STATUS()
'      message = "INT_STATUS"
'      Write_()
'      delay_ms(1000)
'    message = "FM_STATUS"
'   FM_TUNE_STATUS()
'        Write_()
'  delay_ms(3000)
'
'  'SET_PROPERTY()
'
'   ARG2 = 0x25
'   ARG3 = 0x94
'   FM_TUNE_FREQ()
'        message = "RSQ_STATUS"
'   FM_RSQ_STATUS()
'
'
'   Write_()
'  delay_ms(3000)
'goto stop_
'
'
'
'
'  Write_()
'  goto stop_
'
'
'  TX:
'  'передача
'
'  message = "Power TX"
'  ARG2 = 0x00'
'  ARG3 = 0x73' 115dB uV
'  TX_TUNE_POWER()
'        Write_()
'      delay_ms(2000)
' ' SET_PROPERTY()
'
'  message = "RX-96.20"
'  ARG2 = 0x25
'  ARG3 = 0x94'94
'  TX_TUNE_FREQ()
'        Write_()
'      delay_ms(2000)
'  message = "INT_STATUS"
'  GET_INT_STATUS()
'      Write_()
'      delay_ms(2000)
'
'    message = "Power TX"
'  ARG2 = 0x00'
'  ARG3 = 0x73' 115dB uV
'  TX_TUNE_POWER()
'        Write_()
'      delay_ms(2000)
'
'  message = "TX_STATUS"
'  TX_TUNE_STATUS()
'      Write_()
'      delay_ms(2000)
'
' TX1:
' goto TX1
'
'  message = "Power_down"
'  POWER_DOWN()
'  Write_()
'  delay_ms(5000)
'  goto POWER_UP_1
'
'
'  TX_stop:
'  ARG2 = 0x00'
'  ARG3 = 0x73' 115dB uV
'  TX_TUNE_POWER()
'      delay_ms(50)
'  ARG2 = 0x00'
'  ARG3 = 0x00' 115dB uV
'  TX_TUNE_POWER()
'      delay_ms(50)
'  goto TX_stop
'
'
'
'
'
'
'
'
'
'  message = "Power_down"
'  POWER_DOWN()
'  Write_()
'  delay_ms(500)
'   goto POWER_UP_1




end.